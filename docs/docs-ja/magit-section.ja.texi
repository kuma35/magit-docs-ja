\input texinfo    @c -*- texinfo -*-
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c %**start of header
@setfilename magit-section.info
@settitle Magit-Section Developer Manual
@c %**end of header
@documentencoding UTF-8
@documentlanguage en

@copying
@quotation
Copyright (C) 2015-2022 Jonas Bernoulli <jonas@@bernoul.li>

You can redistribute this document and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This document is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE@.  See the GNU General Public License for
more details.

@end quotation
@end copying

@dircategory Magit文書翻訳
@direntry
* Magit-Section(ja): (magit-section.ja).  あなた独自のパッケージでMagit                                              sectionを使用します。
@end direntry

@finalout
@titlepage
@title Magit-Section Developer Manual
@subtitle for version 3.3.0-git
@author Jonas Bernoulli
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Magit-Section Developer Manual

このパッケージは、Magitのメインユーザーインターフェイス(バッファを構成する折りたたみ可能なセクション)を実装します。このパッケージは、以前はMagitの一部として配布されていました。しかし今やMagitやGitとは関係のない他のパッケージでもどのようにすれば使用できるかを示しています。

セクションの抽象化と使用可能なコマンドおよびユーザーオプションの詳細については→@ref{Sections,,,magit,}
このマニュアルでは、あなた独自のパッケージでセクションを使用する方法について説明します。

@noindent
このマニュアルは、Magit-Sectionバージョン 3.3.0-git を対象としています。

@insertcopying
@end ifnottex

@menu
* Introduction::             Introduction
* Creating Sections::        Creating Sections
* Core Functions::           Core Functions
* Matching Functions::       Matching Functions
@end menu

@node Introduction
@chapter Introduction

このパッケージは、Magitのメインユーザーインターフェイス(バッファを構成する折りたたみ可能なセクション)を実装します。このパッケージは、以前はMagitの一部として配布されていました。しかし今やMagitやGitとは関係のない他のパッケージでもどのようにすれば使用できるかを示しています。

セクションの抽象化と使用可能なコマンドおよびユーザーオプションの詳細については→@ref{Sections,,,magit,}
このマニュアルでは、あなた独自のパッケージでセクションを使用する方法について説明します。

ドキュメントに対処されていないものが残っている場合は、Magitがこのライブラリを広範囲に使用していることを鑑み、助けを求める前にまずはMagit関係の方で適切な例を検索してください。宜しくお願いします。

@node Creating Sections
@chapter Creating Sections

@defmac magit-insert-section [name] (type &optional value hide) &rest body
タイプCLASSのセクションオブジェクトを作成し、その@code{value}スロットにVALUEを格納し、ポイントにセクションを挿入します。
CLASSは`magit-section'のサブクラスであるか、@code{(eval
FORM)}の形式です。この場合、FORMは実行時に評価され、サブクラスを返す必要があります。
他の場所では、セクションクラスはしばしばその「タイプ」と呼ばれます。

多くのコマンドは、現在のセクションのクラスに応じて動作が異なり、特定のクラスのセクションは、`keymap'クラススロットを使用して指定される独自のキーマップを持つことができます。そのスロットの値は、値がキーマップである変数である必要があります。

歴史的な理由から、MagitとForgeはほとんどの場合、実際にはクラスを識別せず、適切なパッケージプレフィックスがないシンボルをCLASSとして使用します。これは、他のパッケージでは利用できない、文書化されていないその場しのぎ(kludge)が原因で機能します。

オプションのHIDEがnil以外の場合、デフォルトでセクション本体を折りたたみます。つまり、最初にセクションを作成するときですが、バッファを更新するときは折りたたみません。
それ以外の場合は、デフォルトで展開します。
これは、@code{magit-section-set-visibility-hook}を使用して上書きできます。更新中にセクションが再作成されると、先行の可視性が継承され、HIDEは無視されます（ただし、フックは引き続き尊重されます）。

BODYは、セクションの見出しと本文を実際に挿入する任意の数のフォーム(form)です。オプションのNAMEを指定する場合は、シンボルにする必要があります。シンボルは、挿入されるセクションのオブジェクトに結び付けられます。

BODYが評価される前に、セクションオブジェクトの@code{start}が`point'の値に設定され、BODYが評価された後、その@code{end}が@code{point}の新しい値に設定されます。BODYは、@code{point}を前進させる責任があります。

セクションが空であることがBODY内で判明した場合は、@code{magit-cancel-section}を使用して、部分的に挿入されたセクションのすべてのトレースを中止して削除できます。これは、Gitの出力を洗浄(wash)してセクションを作成し、Gitが今回は実際には何も出力しなかった場合に発生する可能性があります。
@end defmac

@defun magit-insert-heading &rest args
現在挿入されているセクションの見出しを挿入します。

この関数は、@code{magit-insert-section}内でのみ使用する必要があります。

引数なしで呼び出された場合は、挿入されるセクションを表すオブジェクトの@code{content}スロットを@code{point}のマーカーに設定するだけです。この関数をこのように使用する場合、セクションには1行のみを含める必要があります。

文字列またはnilである必要がある引数ARGSを指定して呼び出された場合は、それらの文字列をポイントに挿入します。これが発生する前はセクションにテキストを含めないでください。その後、セクションには1行だけを含める必要があります。@code{face}プロパティがこれらの文字列のいずれかの内部のどこかに設定されている場合は、それらすべてを変更せずに挿入します。それ以外の場合は、挿入されたすべてのテキストに
`magit-section-heading' faceを使用します。

セクションオブジェクトの@code{content}プロパティは、見出しの終わり(@code{start}から@code{content}まで続く)と本文の始まり(@code{content}から@code{end}まで続く)です。@code{content}の値がnilの場合、セクションには見出しがなく、本文を折りたたむことはできません。セクションに見出しがある場合、その高さは、末尾の改行文字を含めて、正確に1行である必要があります。これは強制されません、あなたはそれを正しくする責任があります。唯一の例外は、この関数が必要に応じて改行文字を挿入することです。
@end defun

@defmac magit-insert-section-body &rest body
セクションが展開されたら、BODYを使用してセクション本体を挿入します。セクションの作成時にセクションが展開されている場合、これは@code{progn}のようになります。それ以外の場合、セクションが明示的に展開されるまで、BODYは評価されません。
@end defmac

@defun magit-cancel-section
現在挿入されているセクションの挿入をキャンセルします。そのセクションのすべての痕跡を削除します。
@end defun

@defun magit-wash-sequence function
@code{nil}が返されるか、バッファの終わりに達するまで、FUNCTIONを繰り返し呼び出します。FUNCTIONは、ポイントを前方に移動するか、@code{nil}を返す必要があります。
@end defun

@node Core Functions
@chapter Core Functions

@defun magit-current-section
ポイントまたはコンテキストメニューが呼び出された場所のセクションを返します。
コンテキストメニューを使用する場合、クリックが発生したバッファーが現在のバッファーである場合、ユーザーがクリックしたセクションを返します。
それ以外の場合は、ポイントのセクションを返します。
@end defun

@table @asis
@item Function magit-section-at &optional position
POSITION のセクションを返します。デフォルトはポイントです。 コンテキストメニューが使用されている場合でも、デフォルトでポイントします。
@end table

@defun magit-section-ident section
SECTION@@の一意(unique)の識別子(identifier)を返します。戻り値の形式は@code{((TYPE
. VALUE)...)}です。
@end defun

@defun magit-section-ident-value value
VALUE@@の定数表現(constant representation)を返します。

VALUEは、@code{magit-section}オブジェクトの値です。それ自体がオブジェクトである場合、2つのオブジェクトが同じものを表していても等しくない可能性があるため、セクションの識別(identify)に使用するのには適していません。可能であれば、そのようなオブジェクトに等しい値を返すメソッドを追加する必要があります。それ以外の場合は、引数自体を返すだけのcatch-allメソッドが使用されます。
@end defun

@defun magit-get-section ident &optional root
IDENT@@で識別されるセクションを返します。
IDENTは、@code{magit-section-ident}によって返されるリストである必要があります。オプションのROOTがnil以外の場合は、rootが@code{magit-root-section}であるセクションツリーではなく、そのセクションツリーを検索します。
@end defun

@defun magit-section-lineage section
SECTION@@の系統(lineage)を返します。戻り値の形式は@code{(TYPE...)}です。
@end defun

@defun magit-section-content-p section
SECTION にコンテンツまたは未使用のウォッシャー関数がある場合、非 nil を返します。
@end defun

次の 2 つの関数は、 @code{magit-} プレフィックスを除いて同じ名前を持つ Emacs 関数の置き換えです。
@code{magit-current-section}
のように、カーソルの位置ではなく、ユーザーがコンテキストメニューを呼び出すためにクリックした位置で動作します。

あなたのパッケージがコンテキストメニューを提供し、そのコマンドの一部がデフォルトであっても「ポイントにあるもの」に作用する場合は、接頭辞付きの関数を使用して、必要に応じて代わりにクリック位置を使用するように教えてください。

@table @asis
@item Function magit-point
コンテキストメニューが呼び出されたリターンポイントまたは位置。
コンテキストメニューを使用する場合、現在のバッファーがクリックが発生したバッファーである場合、ユーザーがクリックした位置を返します。
それ以外の場合は、@code{point} と同じ値を返します。

@item Function magit-thing-at-point thing &optional no-properties
ポイントまたはコンテキストメニューが呼び出された場所でTHINGを返します。
コンテキストメニューを使用する場合、現在のバッファがクリックが発生したバッファである場合、ユーザーがクリックしたものを返します。
それ以外の場合は、@code{thing-at-point} と同じ値を返します。 THING と NO-PROPERTIES
の意味については、当該の関数を参照してください。
@end table

@node Matching Functions
@chapter Matching Functions

@defun magit-section-match condition &optional (section (magit-current-section))
SECTIONがCONDITION@@と一致する場合は、tを返します。

SECTIONは、デフォルトでポイントのセクションになります。SECTIONが指定されておらず、ポイントにもセクションがない場合は、nilを返します。

CONDITIONは、以下の形式をとることができます:

@itemize
@item
@code{(CONDITION...)} 条件(CONDITION)のいずれかが一致する場合に一致します。
@item
@code{[CLASS...]} セクションのクラスが最初のクラス(CLASS)またはそのサブクラスと同じである場合に一致します。
セクションの親クラスは2番目のクラス(CLASS)と一致します。等々。

@item
@code{[* CLASS...]} [CLASS@dots{}]に一致するセクションと、それらのすべての子セクションを再帰的に一致させます。
@item
@code{CLASS} 親セクションのクラスには関係なく、セクションのクラスがCLASSまたはそのサブクラスと同じである場合に一致します。
@end itemize

各CLASSは、@code{magit-section}から派生したクラスを識別するクラスシンボルである必要があります。下位互換性のために、CLASSは「タイプシンボル」にすることもできます。@code{type}スロットの値が@code{eq}の場合、セクションはそのようなシンボルに一致します。タイプシンボルの@code{magit--section-type-alist}にエントリがある場合、そのクラスがそのalistのタイプに対応するクラスのサブクラスであれば、セクションもそのタイプに一致します。

注意:
もちろん、正確にしたい場合を除いて、@code{magit-describe-section-briefly}によって出力される完全なセクション系統を指定する必要はないことに注意してください。
@end defun

@defun magit-section-value-if condition &optional section
ポイントのセクションがCONDITIONと一致する場合は、その値を返します。

オプションのSECTIONがnil以外の場合は、代わりにそれが一致するかどうかをテストします。ポイントにセクションがなく、SECTIONがnilの場合は、nilを返します。
セクションが一致しない場合は、nilを返します。

CONDITIONが取ることができる形式については、@code{magit-section-match}を参照してください。
@end defun

@defmac magit-section-case &rest clauses
ポイントのセクションのタイプに関する条項(clauses)から選択します。

各句は@code{(CONDITION
BODY...)}のようになります。セクションのタイプは、各条件と比較されます。最初の一致のBODYフォームが順番に評価され、最後のフォームの値が返されます。BODY内では、シンボル@code{it}がポイントのセクションに結び付けられています。句が成功しない場合、またはポイントにセクションがない場合は、nilを返します。

CONDITIONが取ることができる形式については→@code{magit-section-match}を参照してください。
さらに、tの条件(CONDITION)は最後の節で許可され、他の条件(CONDITIO)Nが一致しない場合は、ポイントにセクションがない場合でも一致します。
@end defmac

@bye
